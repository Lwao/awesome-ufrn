TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    ADD10_OUT : UINT;
    EQ13_OUT : BOOL;
    SEL15_OUT : UINT;
    AND7_OUT : BOOL;
  END_VAR

  ADD10_OUT := ADD(COUNTER, 1);
  EQ13_OUT := EQ(N, ADD10_OUT);
  SEL15_OUT := SEL(EQ13_OUT, ADD10_OUT, 0);
  COUNTER := SEL15_OUT;
  AND7_OUT := AND(EQ13_OUT, TRIG);
  py_eval(TRIG := AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM sim1
  VAR_INPUT
    LIG : BOOL;
    DES : BOOL;
    RES : BOOL;
    S_C : BOOL;
    S_A : BOOL;
  END_VAR
  VAR_OUTPUT
    M : BOOL;
    I : BOOL;
    V_PR : BOOL;
    V_PL : BOOL;
    A_FC : BOOL;
    AUX : BOOL;
  END_VAR

  INITIAL_STEP E0:
  END_STEP

  TRANSITION FROM E0 TO E1
    := LIG and not S_C;
  END_TRANSITION

  STEP E1:
    M(S);
  END_STEP

  TRANSITION FROM E1 TO E2
    := S_A;
  END_TRANSITION

  STEP E2:
    AUX(D, t#10s);
  END_STEP

  TRANSITION FROM E2 TO E3
    := AUX;
  END_TRANSITION

  STEP E3:
    I(L, t#2s);
    V_PL(L, t#2s);
  END_STEP

  TRANSITION FROM E3 TO E4
    := S_C;
  END_TRANSITION

  STEP E4:
    V_PR(N);
  END_STEP

  TRANSITION FROM E4 TO E6
    := DES ;
  END_TRANSITION

  STEP E6:
    AUX(D, t#30s);
  END_STEP

  TRANSITION FROM E6 TO E7
    := AUX;
  END_TRANSITION

  STEP E7:
    M(R);
  END_STEP

  TRANSITION FROM E7 TO E0
    := not M;
  END_TRANSITION

  TRANSITION FROM E4 TO E5
    := not S_C and not DES;
  END_TRANSITION

  STEP E5:
    A_FC(N);
  END_STEP

  TRANSITION FROM E5 TO E6
    := RES;
  END_TRANSITION

END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : sim1;
  END_RESOURCE
END_CONFIGURATION
