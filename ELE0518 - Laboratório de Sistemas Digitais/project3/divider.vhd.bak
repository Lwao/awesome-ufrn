library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_signed.all;

entity divider is
	port(
		show : in integer;
		cin : in std_logic;
		op : in std_logic_vector(2 downto 0);
		s: in std_logic_vector (4 downto 0);
		dis_0, dis_1, dis_2, disp_3, disp_4:  out std_logic_vector (3 downto 0)
		);
end divider;


architecture conv of divider is
	signal temp_s, d1, d0: signed (4 downto 0) := "0000";
	signal op_t: std_logic_vector (3 downto 0) := "0000";
	
begin 
	process (show)
	begin
		case show is
			when 0 =>
				dis_0 <= "1110";
				dis_1 <= "1110";
				dis_2 <= "1100";
				dis_3 <= "1110";
				dis_4 <= "1110";
			when 1 =>
				dis_0 <= "1110";
				dis_1 <= "1110";
				dis_2 <= "1101";
				dis_3 <= "1110";
				dis_4 <= "1110";
			when 2 =>
				dis_0 <= "1110";
				dis_1 <= "1110";
				dis_2 <= "1111";
				dis_3 <= "1110";
				dis_4 <= "1110";
			 when 3 =>
		opt(2 downto 0) <= op(2 downto0);
		dis_4 <= opt;
		if (op="000" or op="001") then
			if(cin='1') then --checa se Ã© positivo ou negativo
				dis_2 <= "1011";
				temp_s <= singed(not s)+1;
			else
				dis_2 <= "1010";
				temp_s <= singed(s);
			end if;
			if (s(4)='1') then -- checa se extrapolou
				dis_3 <= "0001";
			else
				dis_3 <= "0000";
			end if;
			dis_1 <= std_logic_vector(to_unsigned(to_integer(unsigned(s))/10, 5));
			dis_0 <= std_logic_vector(to_unsigned(to_integer(unsigned(s)) mod 10, 5));
			dis_3 <= opt; -- underline
		else
			disp_3 <= "0001" when s(3)='1' else "0000";
			disp_2 <= "0001" when s(2)='1' else "0000";
			disp_1 <= "0001" when s(1)='1' else "0000";
			disp_0 <= "0001" when s(0)='1' else "0000";
		end if;
end conv;

)