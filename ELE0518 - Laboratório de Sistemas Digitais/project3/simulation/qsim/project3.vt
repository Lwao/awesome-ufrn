// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2019 16:37:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    project3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module project3_vlg_sample_tst(
	a,
	b,
	b_op,
	b_rst,
	clk,
	op_in,
	sampler_tx
);
input [4:0] a;
input [4:0] b;
input  b_op;
input  b_rst;
input  clk;
input [2:0] op_in;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or b_op or b_rst or clk or op_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module project3_vlg_check_tst (
	csig,
	dis_0,
	dis_1,
	dis_2,
	dis_3,
	dis_4,
	estado,
	s,
	sampler_rx
);
input  csig;
input [6:0] dis_0;
input [6:0] dis_1;
input [6:0] dis_2;
input [6:0] dis_3;
input [6:0] dis_4;
input [31:0] estado;
input [4:0] s;
input sampler_rx;

reg  csig_expected;
reg [6:0] dis_0_expected;
reg [6:0] dis_1_expected;
reg [6:0] dis_2_expected;
reg [6:0] dis_3_expected;
reg [6:0] dis_4_expected;
reg [31:0] estado_expected;
reg [4:0] s_expected;

reg  csig_prev;
reg [6:0] dis_0_prev;
reg [6:0] dis_1_prev;
reg [6:0] dis_2_prev;
reg [6:0] dis_3_prev;
reg [6:0] dis_4_prev;
reg [31:0] estado_prev;
reg [4:0] s_prev;

reg  csig_expected_prev;
reg [31:0] estado_expected_prev;
reg [4:0] s_expected_prev;

reg  last_csig_exp;
reg [31:0] last_estado_exp;
reg [4:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	csig_prev = csig;
	dis_0_prev = dis_0;
	dis_1_prev = dis_1;
	dis_2_prev = dis_2;
	dis_3_prev = dis_3;
	dis_4_prev = dis_4;
	estado_prev = estado;
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	csig_expected_prev = csig_expected;
	estado_expected_prev = estado_expected;
	s_expected_prev = s_expected;
end


// expected s[ 4 ]
initial
begin
	s_expected[4] = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 

// expected csig
initial
begin
	csig_expected = 1'bX;
end 
// expected estado[ 31 ]
initial
begin
	estado_expected[31] = 1'bX;
end 
// expected estado[ 30 ]
initial
begin
	estado_expected[30] = 1'bX;
end 
// expected estado[ 29 ]
initial
begin
	estado_expected[29] = 1'bX;
end 
// expected estado[ 28 ]
initial
begin
	estado_expected[28] = 1'bX;
end 
// expected estado[ 27 ]
initial
begin
	estado_expected[27] = 1'bX;
end 
// expected estado[ 26 ]
initial
begin
	estado_expected[26] = 1'bX;
end 
// expected estado[ 25 ]
initial
begin
	estado_expected[25] = 1'bX;
end 
// expected estado[ 24 ]
initial
begin
	estado_expected[24] = 1'bX;
end 
// expected estado[ 23 ]
initial
begin
	estado_expected[23] = 1'bX;
end 
// expected estado[ 22 ]
initial
begin
	estado_expected[22] = 1'bX;
end 
// expected estado[ 21 ]
initial
begin
	estado_expected[21] = 1'bX;
end 
// expected estado[ 20 ]
initial
begin
	estado_expected[20] = 1'bX;
end 
// expected estado[ 19 ]
initial
begin
	estado_expected[19] = 1'bX;
end 
// expected estado[ 18 ]
initial
begin
	estado_expected[18] = 1'bX;
end 
// expected estado[ 17 ]
initial
begin
	estado_expected[17] = 1'bX;
end 
// expected estado[ 16 ]
initial
begin
	estado_expected[16] = 1'bX;
end 
// expected estado[ 15 ]
initial
begin
	estado_expected[15] = 1'bX;
end 
// expected estado[ 14 ]
initial
begin
	estado_expected[14] = 1'bX;
end 
// expected estado[ 13 ]
initial
begin
	estado_expected[13] = 1'bX;
end 
// expected estado[ 12 ]
initial
begin
	estado_expected[12] = 1'bX;
end 
// expected estado[ 11 ]
initial
begin
	estado_expected[11] = 1'bX;
end 
// expected estado[ 10 ]
initial
begin
	estado_expected[10] = 1'bX;
end 
// expected estado[ 9 ]
initial
begin
	estado_expected[9] = 1'bX;
end 
// expected estado[ 8 ]
initial
begin
	estado_expected[8] = 1'bX;
end 
// expected estado[ 7 ]
initial
begin
	estado_expected[7] = 1'bX;
end 
// expected estado[ 6 ]
initial
begin
	estado_expected[6] = 1'bX;
end 
// expected estado[ 5 ]
initial
begin
	estado_expected[5] = 1'bX;
end 
// expected estado[ 4 ]
initial
begin
	estado_expected[4] = 1'bX;
end 
// expected estado[ 3 ]
initial
begin
	estado_expected[3] = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 
// generate trigger
always @(csig_expected or csig or dis_0_expected or dis_0 or dis_1_expected or dis_1 or dis_2_expected or dis_2 or dis_3_expected or dis_3 or dis_4_expected or dis_4 or estado_expected or estado or s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected csig = %b | expected dis_0 = %b | expected dis_1 = %b | expected dis_2 = %b | expected dis_3 = %b | expected dis_4 = %b | expected estado = %b | expected s = %b | ",csig_expected_prev,dis_0_expected_prev,dis_1_expected_prev,dis_2_expected_prev,dis_3_expected_prev,dis_4_expected_prev,estado_expected_prev,s_expected_prev);
	$display("| real csig = %b | real dis_0 = %b | real dis_1 = %b | real dis_2 = %b | real dis_3 = %b | real dis_4 = %b | real estado = %b | real s = %b | ",csig_prev,dis_0_prev,dis_1_prev,dis_2_prev,dis_3_prev,dis_4_prev,estado_prev,s_prev);
`endif
	if (
		( csig_expected_prev !== 1'bx ) && ( csig_prev !== csig_expected_prev )
		&& ((csig_expected_prev !== last_csig_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port csig :: @time = %t",  $realtime);
		$display ("     Expected value = %b", csig_expected_prev);
		$display ("     Real value = %b", csig_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_csig_exp = csig_expected_prev;
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( estado_expected_prev[3] !== 1'bx ) && ( estado_prev[3] !== estado_expected_prev[3] )
		&& ((estado_expected_prev[3] !== last_estado_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[3] = estado_expected_prev[3];
	end
	if (
		( estado_expected_prev[4] !== 1'bx ) && ( estado_prev[4] !== estado_expected_prev[4] )
		&& ((estado_expected_prev[4] !== last_estado_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[4] = estado_expected_prev[4];
	end
	if (
		( estado_expected_prev[5] !== 1'bx ) && ( estado_prev[5] !== estado_expected_prev[5] )
		&& ((estado_expected_prev[5] !== last_estado_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[5] = estado_expected_prev[5];
	end
	if (
		( estado_expected_prev[6] !== 1'bx ) && ( estado_prev[6] !== estado_expected_prev[6] )
		&& ((estado_expected_prev[6] !== last_estado_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[6] = estado_expected_prev[6];
	end
	if (
		( estado_expected_prev[7] !== 1'bx ) && ( estado_prev[7] !== estado_expected_prev[7] )
		&& ((estado_expected_prev[7] !== last_estado_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[7] = estado_expected_prev[7];
	end
	if (
		( estado_expected_prev[8] !== 1'bx ) && ( estado_prev[8] !== estado_expected_prev[8] )
		&& ((estado_expected_prev[8] !== last_estado_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[8] = estado_expected_prev[8];
	end
	if (
		( estado_expected_prev[9] !== 1'bx ) && ( estado_prev[9] !== estado_expected_prev[9] )
		&& ((estado_expected_prev[9] !== last_estado_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[9] = estado_expected_prev[9];
	end
	if (
		( estado_expected_prev[10] !== 1'bx ) && ( estado_prev[10] !== estado_expected_prev[10] )
		&& ((estado_expected_prev[10] !== last_estado_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[10] = estado_expected_prev[10];
	end
	if (
		( estado_expected_prev[11] !== 1'bx ) && ( estado_prev[11] !== estado_expected_prev[11] )
		&& ((estado_expected_prev[11] !== last_estado_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[11] = estado_expected_prev[11];
	end
	if (
		( estado_expected_prev[12] !== 1'bx ) && ( estado_prev[12] !== estado_expected_prev[12] )
		&& ((estado_expected_prev[12] !== last_estado_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[12] = estado_expected_prev[12];
	end
	if (
		( estado_expected_prev[13] !== 1'bx ) && ( estado_prev[13] !== estado_expected_prev[13] )
		&& ((estado_expected_prev[13] !== last_estado_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[13] = estado_expected_prev[13];
	end
	if (
		( estado_expected_prev[14] !== 1'bx ) && ( estado_prev[14] !== estado_expected_prev[14] )
		&& ((estado_expected_prev[14] !== last_estado_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[14] = estado_expected_prev[14];
	end
	if (
		( estado_expected_prev[15] !== 1'bx ) && ( estado_prev[15] !== estado_expected_prev[15] )
		&& ((estado_expected_prev[15] !== last_estado_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[15] = estado_expected_prev[15];
	end
	if (
		( estado_expected_prev[16] !== 1'bx ) && ( estado_prev[16] !== estado_expected_prev[16] )
		&& ((estado_expected_prev[16] !== last_estado_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[16] = estado_expected_prev[16];
	end
	if (
		( estado_expected_prev[17] !== 1'bx ) && ( estado_prev[17] !== estado_expected_prev[17] )
		&& ((estado_expected_prev[17] !== last_estado_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[17] = estado_expected_prev[17];
	end
	if (
		( estado_expected_prev[18] !== 1'bx ) && ( estado_prev[18] !== estado_expected_prev[18] )
		&& ((estado_expected_prev[18] !== last_estado_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[18] = estado_expected_prev[18];
	end
	if (
		( estado_expected_prev[19] !== 1'bx ) && ( estado_prev[19] !== estado_expected_prev[19] )
		&& ((estado_expected_prev[19] !== last_estado_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[19] = estado_expected_prev[19];
	end
	if (
		( estado_expected_prev[20] !== 1'bx ) && ( estado_prev[20] !== estado_expected_prev[20] )
		&& ((estado_expected_prev[20] !== last_estado_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[20] = estado_expected_prev[20];
	end
	if (
		( estado_expected_prev[21] !== 1'bx ) && ( estado_prev[21] !== estado_expected_prev[21] )
		&& ((estado_expected_prev[21] !== last_estado_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[21] = estado_expected_prev[21];
	end
	if (
		( estado_expected_prev[22] !== 1'bx ) && ( estado_prev[22] !== estado_expected_prev[22] )
		&& ((estado_expected_prev[22] !== last_estado_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[22] = estado_expected_prev[22];
	end
	if (
		( estado_expected_prev[23] !== 1'bx ) && ( estado_prev[23] !== estado_expected_prev[23] )
		&& ((estado_expected_prev[23] !== last_estado_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[23] = estado_expected_prev[23];
	end
	if (
		( estado_expected_prev[24] !== 1'bx ) && ( estado_prev[24] !== estado_expected_prev[24] )
		&& ((estado_expected_prev[24] !== last_estado_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[24] = estado_expected_prev[24];
	end
	if (
		( estado_expected_prev[25] !== 1'bx ) && ( estado_prev[25] !== estado_expected_prev[25] )
		&& ((estado_expected_prev[25] !== last_estado_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[25] = estado_expected_prev[25];
	end
	if (
		( estado_expected_prev[26] !== 1'bx ) && ( estado_prev[26] !== estado_expected_prev[26] )
		&& ((estado_expected_prev[26] !== last_estado_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[26] = estado_expected_prev[26];
	end
	if (
		( estado_expected_prev[27] !== 1'bx ) && ( estado_prev[27] !== estado_expected_prev[27] )
		&& ((estado_expected_prev[27] !== last_estado_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[27] = estado_expected_prev[27];
	end
	if (
		( estado_expected_prev[28] !== 1'bx ) && ( estado_prev[28] !== estado_expected_prev[28] )
		&& ((estado_expected_prev[28] !== last_estado_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[28] = estado_expected_prev[28];
	end
	if (
		( estado_expected_prev[29] !== 1'bx ) && ( estado_prev[29] !== estado_expected_prev[29] )
		&& ((estado_expected_prev[29] !== last_estado_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[29] = estado_expected_prev[29];
	end
	if (
		( estado_expected_prev[30] !== 1'bx ) && ( estado_prev[30] !== estado_expected_prev[30] )
		&& ((estado_expected_prev[30] !== last_estado_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[30] = estado_expected_prev[30];
	end
	if (
		( estado_expected_prev[31] !== 1'bx ) && ( estado_prev[31] !== estado_expected_prev[31] )
		&& ((estado_expected_prev[31] !== last_estado_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estado_exp[31] = estado_expected_prev[31];
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end
	if (
		( s_expected_prev[4] !== 1'bx ) && ( s_prev[4] !== s_expected_prev[4] )
		&& ((s_expected_prev[4] !== last_s_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_exp[4] = s_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module project3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] a;
reg [4:0] b;
reg b_op;
reg b_rst;
reg clk;
reg [2:0] op_in;
// wires                                               
wire csig;
wire [6:0] dis_0;
wire [6:0] dis_1;
wire [6:0] dis_2;
wire [6:0] dis_3;
wire [6:0] dis_4;
wire [31:0] estado;
wire [4:0] s;

wire sampler;                             

// assign statements (if any)                          
project3 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.b_op(b_op),
	.b_rst(b_rst),
	.clk(clk),
	.csig(csig),
	.dis_0(dis_0),
	.dis_1(dis_1),
	.dis_2(dis_2),
	.dis_3(dis_3),
	.dis_4(dis_4),
	.estado(estado),
	.op_in(op_in),
	.s(s)
);
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 
// op_in[ 2 ]
initial
begin
	op_in[2] = 1'b1;
end 
// op_in[ 1 ]
initial
begin
	op_in[1] = 1'b1;
end 
// op_in[ 0 ]
initial
begin
	op_in[0] = 1'b1;
end 

// b_op
initial
begin
	b_op = 1'b1;
end 

// b_rst
initial
begin
	b_rst = 1'b1;
	b_rst = #1280000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500000 1'b1;
	#2500000;
end 

project3_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.b_op(b_op),
	.b_rst(b_rst),
	.clk(clk),
	.op_in(op_in),
	.sampler_tx(sampler)
);

project3_vlg_check_tst tb_out(
	.csig(csig),
	.dis_0(dis_0),
	.dis_1(dis_1),
	.dis_2(dis_2),
	.dis_3(dis_3),
	.dis_4(dis_4),
	.estado(estado),
	.s(s),
	.sampler_rx(sampler)
);
endmodule

