library ieee;
use ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use ieee.std_logic_unsigned.all;

entity lab7 is
	port(
		h			: in std_logic;
		clk, rst	: in std_logic;
		count    : buffer std_logic_vector(3 downto 0);
		a			: out std_logic_vector (4 downto 0)
	);
end lab7;

architecture mde1 of lab7 is
	-- s0 = 00 000
	-- s1 = 10 000
	-- s2 = 01 000
	-- s3 = 00 100
	-- s4 = 00 010
	-- s5 = 00 001
	type state is (s0, s1, s2, s3, s4, s5);
	signal actual_s, next_s: state;
begin 
	state_register: process(clk, rst)
	begin 
		if (rst='1') then
			actual_s <= s0;
		elsif (clk='1' and clk'event) then
			actual_s <= next_s;
		end if;
	end process state_register

	logic: process(actual_s, h)
	begin 
			if (h='1') then
				case actual_s is
					when s0 =>
						a <= "00000";
						next_s <= s1;
					when s1 =>
						a <= "10000";
						next_s <= s2;
					when s2 =>
						a <= "01000";
						next_s <= s3;
					when s3 =>
						a <= "00100";
						next_s <= s4;
					when s4 =>
						a <= "00010";
						next_s <= s5;
					when s5 =>
						a <= "00001";
						next_s <= s0;
				end case;
				count <= count + 1;
			else 
				case actual_s is
					when s0 =>
						a <= "00000";
					when s1 =>
						a <= "10000";
					when s2 =>
						a <= "01000";
					when s3 =>
						a <= "00100";
					when s4 =>
						a <= "00010";
					when s5 =>
						a <= "00001";
				end case;
				next_s <= s0;
				count <= "00";
	end process logic;
end mde1;